public with sharing class WeekFiveHomework {
    
	// Remember Sets & Maps??  We did a little practice with Lists in week 2, but we need to make sure we know how to use Sets & Maps as well!!
	
    public static void setsReview(){

        //Your assignment: Play with Sets!

        // 1.  Create a set of Strings and add at least 5 entries
Set<String> firstStringSet = new Set<String>();
        firstStringSet.add('car');
        firstStringSet.add('jeep');
        firstStringSet.add('truck');
        firstStringSet.add('bike');
        firstStringSet.add('bus');
        //Use System.debug to print out the size of your set
         System.debug('The size of the s before adding Sub : ' + firstStringSet.size());                


        //Add an item to your set that already exists
        firstStringSet.add('car');  


        //Use System.debug to print out the size again,  they should be the same!
        System.debug('The size of the s after  adding car : ' + firstStringSet.size());



        // 2.  Bonus Points!  Check out the documentation on Sets. Go to the section titled Set Methods. Pick one of the methods to try out and print the results to the debug log.  
        // Documentation: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_set.htm
        //Hint:  can you print out a boolean that indicates if the set is empty?  Can you clone it?
        
        Set<Integer> numbersCountingBy10 = new Set<Integer> {10,20,30,40,50};
        System.debug('numbersCountingBy10 : ' + numbersCountingBy10);
        
        system.debug('is numbersCountingBy10 Empty? : ' + numbersCountingBy10.isEmpty());
        
        Set<Integer> clonedNumbersCountingBy10 = numbersCountingBy10.clone();
        System.debug('clonedSet : ' + clonedNumbersCountingBy10);


    }

    public static void mapsReview () {

        //Time to get creative!  

        // 1. Create a new Map.  You can use whatever primitives/object types you like, as long as they make sense.
        // Try to add at least 5 Key/value pairs.
        Map<Integer, String> myFirstMap = new Map<Integer, String>{10 => 'jill', 11 => 'nell', 12 => 'kate', 13 => 'sam', 14 => 'joe'};
          

        //Now, in the debug log, print out  a list of the values.
        system.debug('myFirstMap variable values :' + myFirstMap.values());


        //Can you print out a set of the Keys?Yes, can printout a set of the keys (10, 11, 12, 13, 14)



        // 2. Bonus!  Check out the documentation on Maps. Go to the section titled Map Methods.  Manipulate the Map using one of the methods defined in the documentation
        // Documentation: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_map.htm
        // Hint: Can you remove an entry using the key?  Can you clear out the map without deleting it?
        system.debug('Map before deleting 13:' + myFirstMap);
        myFirstMap.remove(13);
        system.debug('Map after deleting 13:' + myFirstMap);
         myFirstMap.clear();
        system.debug('is myFirstMap empty after clear? ' + myFirstMap.isEmpty());
        


    }

    public static void listsReview() {
        
        // 1. Create a list of Strings.  Add at least 5 entries to the list, all in one line
        List<String> stateList1 = new List<String>{'ant', 'spider', 'moss', 'wasp', 'bee'};


        // 2. Create a second list of Strings and add 5 or more entries to this list.
        List<String> stateList2 = new List<String>();
        stateList2.add('fries');
        stateList2.add('ice cream ');
        stateList2.add('cake');
        stateList2.add('donut');
        stateList2.add('cookie');


        //3.  Bonus! Using the documentation on standard List methods from Salesforce, add the items from your first list, to your second list with one command
        // Documentation: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_list.htm
        List<String> myListOfString = new List<String>();
        myListOfString.addAll(stateList1);
        myListOfString.addAll(stateList2);


        //4.  Can you now loop through your combined list and print it to the debug log?  (Hint:  Check the documentation!)
        for(String starString : myListOfString){
            system.debug('combined list element : ' + starString);
        }
    }
 	    //refered from David Liu videos
    public static void test(){
        listsReview();
        mapsReview();
        setsReview();
        
        
        
        
      }
